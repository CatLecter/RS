services:
  movies_db:
    container_name: movies_db
    image: postgres:14.3-bullseye
    env_file:
      - ./movies_db/.env
    expose:
      - 5432
    networks:
      - net
    volumes:
      - movies_db:/var/lib/postgresql/data
      - ./movies_db/sql_scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d movies"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  sqlite_to_postgres:
    container_name: sqlite_to_postgres
    build: ./sqlite_to_postgres/
    restart: on-failure
    env_file:
      - ./sqlite_to_postgres/.env
    volumes:
      - ./movies_sqlite/db.sqlite:/usr/src/sqlite_to_postgres/db.sqlite
    networks:
      - net
    links:
      - movies_db
    depends_on:
      movies_db:
        condition: service_healthy

  movies_admin:
    build: ./movies_admin/
    container_name: admin_panel
    restart: always
    env_file:
      - ./movies_admin/.env
    expose:
      - 8000
    networks:
      - net
    links:
      - movies_db
    depends_on:
      movies_db:
        condition: service_healthy

  elasticsearch:
    image: elasticsearch:7.17.3
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es:/usr/share/elasticsearch/data
    expose:
      - 9200
    networks:
      - net
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  etl:
    build: ./etl/
    container_name: etl
    restart: on-failure
    env_file:
      - ./etl/.env
    networks:
      - net
    depends_on:
      elasticsearch:
        condition: service_healthy
      movies_db:
        condition: service_healthy

  search_cache:
    image: redis:7.0.0-bullseye
    expose:
      - 6379
    networks:
      - net
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  search_api:
    build: ./search_api/
    container_name: search_api
    hostname: search_api
    restart: on-failure
    env_file:
      - ./search_api/.env
    networks:
      - net
    depends_on:
      elasticsearch:
        condition: service_healthy
      search_cache:
        condition: service_healthy

  nginx:
    image: nginx:1.21.6
    container_name: nginx
    restart: on-failure
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./movies_admin/static/:/static
    ports:
      - "80:80"
    networks:
      - net
    depends_on:
      - movies_admin
      - search_api

  zookeeper-kafka:
    image: confluentinc/cp-zookeeper:7.1.1
    hostname: zookeeper-kafka
    ports:
      - "12181:12181"
    networks:
      - net
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 12181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-kafka:12888:13888

  kafka:
    image: confluentinc/cp-kafka:7.1.1
    hostname: kafka
    ports:
      - "19092:19092"
    networks:
      - net
    depends_on:
      - zookeeper-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-kafka:12181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
    healthcheck:
      test: nc -z localhost 19092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  init-kafka:
    image: confluentinc/cp-kafka:7.1.1
    networks:
      - net
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka:19092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic bookmarks --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic language --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic ratings --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic views --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic watched --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:19092 --list
      "

  kafdrop:
    image: obsidiandynamics/kafdrop:3.30.0
    ports:
      - "19000:9000"
    networks:
      - net
    environment:
      KAFKA_BROKERCONNECT: "kafka:19092"
    depends_on:
      kafka:
        condition: service_healthy

  clickhouse:
#    image: altinity/clickhouse-server:21.8.15.15.altinitystable
    image: clickhouse/clickhouse-server:22.5.1.2079
    container_name: clickhouse
    hostname: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - net
    volumes:
      - ./ugc/migrations/sql_scripts:/docker-entrypoint-initdb.d
      - ch_db:/var/lib/clickhouse/
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "localhost:8123/ping" ]
      interval: 30s
      timeout: 5s
      retries: 3

  ugc_etl:
    build: ./ugc/migrations/
    container_name: ugc_etl
    networks:
      - net
    depends_on:
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy

  ugc:
    build: ./ugc/
    container_name: ugc
    restart: always
    env_file:
      - ./ugc/.env
    expose:
      - 8000
    networks:
      - net
    depends_on:
      kafka:
        condition: service_healthy

  auth_db:
    image: postgres:14.3-bullseye
    restart: always
    volumes:
      - auth_db:/var/lib/postgresql/data
    env_file:
      - ./auth/.env-db
    ports:
      - "5433:5432"
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d movies"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7.0.0-bullseye
    expose:
      - 6379
    networks:
      - net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]

  auth:
    build: ./auth/
    env_file:
      - ./auth/.env-flask
    volumes:
      - ./auth/auth_api:/app/auth_api
      - ./auth/migrations:/app/migrations
    expose:
      - 5000
    networks:
      - net
    depends_on:
      auth_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: flask run -h 0.0.0.0

  rabbitmq:
    image: rabbitmq:3.10.2-management
    container_name: rabbitmq
    restart: on-failure
    env_file:
      - ./rs/.rabbitmq_env
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - net
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  rs:
    build: ./rs/
    container_name: rs
    restart: always
    env_file:
      - ./rs/.rs_env
    environment:
      FOR_PERIOD: 14
    volumes:
      - ./rs/log/:/usr/src/rs/log
    networks:
      - net
    depends_on:
      rabbitmq:
        condition: service_healthy

  rs_cache:
    image: redis:7.0.0-bullseye
    expose:
      - 6379
    networks:
      - net
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

#  mongo:
#    image: mongo:5.0.9-focal
#    container_name: mongo
#    hostname: mongo
#    restart: on-failure
#    env_file:
#      - ./rs_api/.mongo_env
#    volumes:
#      - mongo:/data/db
#    ports:
#      - "27017:27017"
#    networks:
#      - net
#    healthcheck:
#      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
#      interval: 10s
#      timeout: 10s
#      retries: 5
#      start_period: 40s

  rs_db:
    image: elasticsearch:7.17.3
    container_name: rs_db
    restart: on-failure
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - rs_db:/usr/share/elasticsearch/data
    expose:
      - 9200
    networks:
      - net
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  rs_api:
    build: ./rs_api/
    container_name: rs_api
    hostname: rs_api
    restart: on-failure
    env_file:
      - ./rs_api/.env
    networks:
      - net
    depends_on:
      rs_db:
        condition: service_healthy
      rs_cache:
        condition: service_healthy

volumes:
  movies_db:
  es:
  auth_db:
  ch_db:
  rabbitmq:
  rs_db:

networks:
  net:
    driver: bridge
    ipam:
     config:
       - subnet: 10.5.0.0/24
         gateway: 10.5.0.1
